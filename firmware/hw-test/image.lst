
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000594  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .data         00000014  00000594  00000594  000005e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000084  000005a8  000005a8  000005fc  2**2
                  ALLOC
  3 .debug_abbrev 00000271  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000061f  00000000  00000000  0000086d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000004e0  00000000  00000000  00000e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000120  00000000  00000000  0000136c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 0000015c  00000000  00000000  0000148c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000040  00000000  00000000  000015e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001e2  00000000  00000000  00001628  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .comment      00000011  00000000  00000000  0000180a  2**0
                  CONTENTS, READONLY
 11 .debug_loc    00000181  00000000  00000000  0000181b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  0000199c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 cb 	calli 3f8 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 05 b0 	ori gp,gp,0x5b0
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 05 a8 	ori r1,r1,0x5a8
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 06 2c 	ori r3,r3,0x62c

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:
#include "soc-hw.h"

int main()
{
 208:	37 9c ff fc 	addi sp,sp,-4
 20c:	5b 9d 00 04 	sw (sp+4),ra
	//volatile unsigned int  *p;
	//*p = gpion0->in;
	//sintesis0->data = *p; //se pasa las 13 teclas de gpio a síntesis
	sintesis0->cs= 0x02; //start=1
 210:	78 01 00 00 	mvhi r1,0x0
 214:	38 21 05 a4 	ori r1,r1,0x5a4
 218:	28 21 00 00 	lw r1,(r1+0)
 21c:	34 02 00 02 	mvi r2,2
 220:	58 22 00 04 	sw (r1+4),r2
	//gpion0->out = 0x0B;	
	lcd_inicializa();
 224:	f8 00 00 98 	calli 484 <lcd_inicializa>
	//irq_set_mask( 0x00000001 ); //   Activación y enmascaramiento
	//gpion0->cs  = 0x01; //flag de interrupción int=1;
	//}
	//gpion0->out = 0X0E;
 return 0;
}
 228:	34 01 00 00 	mvi r1,0
 22c:	2b 9d 00 04 	lw ra,(sp+4)
 230:	37 9c 00 04 	addi sp,sp,4
 234:	c3 a0 00 00 	ret

00000238 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 238:	c3 a0 00 00 	ret

0000023c <isr_init>:

void isr_init()
{
 23c:	78 01 00 00 	mvhi r1,0x0
 240:	38 21 05 a8 	ori r1,r1,0x5a8
 244:	78 02 00 00 	mvhi r2,0x0
 248:	38 42 02 38 	ori r2,r2,0x238
 */
void isr_null()
{
}

void isr_init()
 24c:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 250:	58 22 00 00 	sw (r1+0),r2
 254:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 258:	5c 23 ff fe 	bne r1,r3,250 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 25c:	c3 a0 00 00 	ret

00000260 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 260:	3c 21 00 02 	sli r1,r1,2
 264:	78 03 00 00 	mvhi r3,0x0
 268:	38 63 05 a8 	ori r3,r3,0x5a8
 26c:	b4 61 18 00 	add r3,r3,r1
 270:	58 62 00 00 	sw (r3+0),r2
}
 274:	c3 a0 00 00 	ret

00000278 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 278:	3c 21 00 02 	sli r1,r1,2
 27c:	78 03 00 00 	mvhi r3,0x0
 280:	38 63 05 a8 	ori r3,r3,0x5a8
 284:	78 02 00 00 	mvhi r2,0x0
 288:	b4 61 18 00 	add r3,r3,r1
 28c:	38 42 02 38 	ori r2,r2,0x238
 290:	58 62 00 00 	sw (r3+0),r2
}
 294:	c3 a0 00 00 	ret

00000298 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 298:	78 02 00 00 	mvhi r2,0x0
 29c:	38 42 05 98 	ori r2,r2,0x598
 2a0:	38 03 c3 50 	mvu r3,0xc350
 2a4:	28 42 00 00 	lw r2,(r2+0)
 2a8:	88 23 08 00 	mul r1,r1,r3
 2ac:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 2b0:	34 01 00 00 	mvi r1,0
 2b4:	58 41 00 14 	sw (r2+20),r1
	timer0->tcr1 = TIMER_EN;
 2b8:	34 01 00 08 	mvi r1,8
 2bc:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 2c0:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 2c4:	20 21 00 01 	andi r1,r1,0x1
 2c8:	44 20 ff fe 	be r1,r0,2c0 <msleep+0x28>
}
 2cc:	c3 a0 00 00 	ret

000002d0 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 2d0:	78 02 00 00 	mvhi r2,0x0
 2d4:	38 42 05 98 	ori r2,r2,0x598
 2d8:	28 42 00 00 	lw r2,(r2+0)
 2dc:	08 21 00 32 	muli r1,r1,50
 2e0:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 2e4:	34 01 00 00 	mvi r1,0
 2e8:	58 41 00 14 	sw (r2+20),r1
	timer0->tcr1 = TIMER_EN;
 2ec:	34 01 00 08 	mvi r1,8
 2f0:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 2f4:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 2f8:	20 21 00 01 	andi r1,r1,0x1
 2fc:	44 20 ff fe 	be r1,r0,2f4 <nsleep+0x24>
}
 300:	c3 a0 00 00 	ret

00000304 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 304:	78 01 00 00 	mvhi r1,0x0
 308:	38 21 06 28 	ori r1,r1,0x628
 30c:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 310:	78 02 00 00 	mvhi r2,0x0
 314:	38 42 05 98 	ori r2,r2,0x598
 318:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 31c:	34 63 00 01 	addi r3,r3,1
 320:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 324:	34 01 00 0e 	mvi r1,14
 328:	58 41 00 00 	sw (r2+0),r1
}
 32c:	c3 a0 00 00 	ret

00000330 <tic_init>:
void tic_init() //inicializacion del control de interrupciones del timer 
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 330:	78 01 00 00 	mvhi r1,0x0
 334:	38 21 05 98 	ori r1,r1,0x598
 338:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init() //inicializacion del control de interrupciones del timer 
{
	tic_msec = 0;
 33c:	78 01 00 00 	mvhi r1,0x0
 340:	34 04 00 00 	mvi r4,0
 344:	38 21 06 28 	ori r1,r1,0x628
 348:	58 24 00 00 	sw (r1+0),r4

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 34c:	34 01 13 88 	mvi r1,5000
 350:	58 61 00 04 	sw (r3+4),r1
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 354:	78 02 00 00 	mvhi r2,0x0
 358:	78 01 00 00 	mvhi r1,0x0
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 35c:	58 64 00 08 	sw (r3+8),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 360:	38 21 05 a8 	ori r1,r1,0x5a8
 364:	38 42 03 04 	ori r2,r2,0x304
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN; // Almacena en un vector de control y estado los registros de HW correspondientes, a enable IRQ -autoreload
 368:	34 04 00 0e 	mvi r4,14
 36c:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 370:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN; // Almacena en un vector de control y estado los registros de HW correspondientes, a enable IRQ -autoreload

	isr_register(1, &tic_isr);
}
 374:	c3 a0 00 00 	ret

00000378 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 378:	c3 a0 00 00 	ret

0000037c <uart_getchar>:

char uart_getchar()
{   
 37c:	78 01 00 00 	mvhi r1,0x0
 380:	38 21 05 94 	ori r1,r1,0x594
 384:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 388:	28 41 00 00 	lw r1,(r2+0)
 38c:	20 21 00 01 	andi r1,r1,0x1
 390:	44 20 ff fe 	be r1,r0,388 <uart_getchar+0xc>
	return uart0->rxtx;
 394:	28 41 00 04 	lw r1,(r2+4)
}
 398:	20 21 00 ff 	andi r1,r1,0xff
 39c:	c3 a0 00 00 	ret

000003a0 <uart_putchar>:

void uart_putchar(char c)
{
 3a0:	78 02 00 00 	mvhi r2,0x0
 3a4:	38 42 05 94 	ori r2,r2,0x594
 3a8:	28 43 00 00 	lw r3,(r2+0)
 3ac:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 3b0:	28 62 00 00 	lw r2,(r3+0)
 3b4:	20 42 00 10 	andi r2,r2,0x10
 3b8:	5c 40 ff fe 	bne r2,r0,3b0 <uart_putchar+0x10>
	uart0->rxtx = c;
 3bc:	58 61 00 04 	sw (r3+4),r1
}
 3c0:	c3 a0 00 00 	ret

000003c4 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 3c4:	40 24 00 00 	lbu r4,(r1+0)
 3c8:	44 80 00 0b 	be r4,r0,3f4 <uart_putstr+0x30>
 3cc:	78 02 00 00 	mvhi r2,0x0
 3d0:	38 42 05 94 	ori r2,r2,0x594
 3d4:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 3d8:	28 62 00 00 	lw r2,(r3+0)
 3dc:	20 42 00 10 	andi r2,r2,0x10
 3e0:	5c 40 ff fe 	bne r2,r0,3d8 <uart_putstr+0x14>
	uart0->rxtx = c;
 3e4:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 3e8:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 3ec:	40 24 00 00 	lbu r4,(r1+0)
 3f0:	5c 82 ff fa 	bne r4,r2,3d8 <uart_putstr+0x14>
 3f4:	c3 a0 00 00 	ret

000003f8 <irq_handler>:
}

//***************************************************************************
//Rutina de interrupción - del gpio
void irq_handler(uint32_t irq)
{	
 3f8:	37 9c ff fc 	addi sp,sp,-4
        volatile unsigned int     irqc;  
 	irqc=0;
 3fc:	34 02 00 00 	mvi r2,0
 400:	5b 82 00 04 	sw (sp+4),r2
	irqc=(char)irq;
 404:	20 21 00 ff 	andi r1,r1,0xff
 408:	5b 81 00 04 	sw (sp+4),r1
	if(irqc == 0x00000001){   //se lee vector de interrupciones, se hace una escritura si coincice con la enmascarada
 40c:	2b 83 00 04 	lw r3,(sp+4)
 410:	34 01 00 01 	mvi r1,1
 414:	5c 61 00 0b 	bne r3,r1,440 <irq_handler+0x48>
		timer0->counter1 = 'work';
 418:	78 03 00 00 	mvhi r3,0x0
 41c:	38 63 05 98 	ori r3,r3,0x598
		gpion0->cs  = 0x00; //flag de interrupción int=0;
 420:	78 01 00 00 	mvhi r1,0x0
{	
        volatile unsigned int     irqc;  
 	irqc=0;
	irqc=(char)irq;
	if(irqc == 0x00000001){   //se lee vector de interrupciones, se hace una escritura si coincice con la enmascarada
		timer0->counter1 = 'work';
 424:	28 64 00 00 	lw r4,(r3+0)
		gpion0->cs  = 0x00; //flag de interrupción int=0;
 428:	38 21 05 9c 	ori r1,r1,0x59c
 42c:	28 23 00 00 	lw r3,(r1+0)
{	
        volatile unsigned int     irqc;  
 	irqc=0;
	irqc=(char)irq;
	if(irqc == 0x00000001){   //se lee vector de interrupciones, se hace una escritura si coincice con la enmascarada
		timer0->counter1 = 'work';
 430:	78 01 77 6f 	mvhi r1,0x776f
 434:	38 21 72 6b 	ori r1,r1,0x726b
 438:	58 81 00 14 	sw (r4+20),r1
		gpion0->cs  = 0x00; //flag de interrupción int=0;
 43c:	58 62 00 08 	sw (r3+8),r2
	}
}
 440:	37 9c 00 04 	addi sp,sp,4
 444:	c3 a0 00 00 	ret

00000448 <wait_lcd>:


// LCD Funciones
void wait_lcd (unsigned int a) {
	while (a == 0x01){ //donep=1; 
 448:	34 02 00 01 	mvi r2,1
 44c:	5c 22 00 07 	bne r1,r2,468 <wait_lcd+0x20>
 450:	78 02 00 00 	mvhi r2,0x0
 454:	38 42 05 a0 	ori r2,r2,0x5a0
 458:	28 43 00 00 	lw r3,(r2+0)
 45c:	b8 20 10 00 	mv r2,r1
		a = lcd0->donepwb;
 460:	28 61 00 08 	lw r1,(r3+8)
}


// LCD Funciones
void wait_lcd (unsigned int a) {
	while (a == 0x01){ //donep=1; 
 464:	44 22 ff ff 	be r1,r2,460 <wait_lcd+0x18>
		a = lcd0->donepwb;
	}
	while (a == 0x00){ //donep=0;
 468:	5c 20 00 06 	bne r1,r0,480 <wait_lcd+0x38>
 46c:	78 01 00 00 	mvhi r1,0x0
 470:	38 21 05 a0 	ori r1,r1,0x5a0
 474:	28 22 00 00 	lw r2,(r1+0)
		a = lcd0->donepwb;
 478:	28 41 00 08 	lw r1,(r2+8)
// LCD Funciones
void wait_lcd (unsigned int a) {
	while (a == 0x01){ //donep=1; 
		a = lcd0->donepwb;
	}
	while (a == 0x00){ //donep=0;
 47c:	44 20 ff ff 	be r1,r0,478 <wait_lcd+0x30>
 480:	c3 a0 00 00 	ret

00000484 <lcd_inicializa>:
		a = lcd0->donepwb;
	}
}
void lcd_inicializa () { //unsigned char  uint8_t 8 Bit 
 484:	37 9c ff fc 	addi sp,sp,-4
	volatile unsigned int  a;
	lcd0->cs = 0x20;// sig=0, rsin=0, donec=0; start=1
 488:	78 01 00 00 	mvhi r1,0x0
 48c:	38 21 05 a0 	ori r1,r1,0x5a0
 490:	28 21 00 00 	lw r1,(r1+0)
 494:	34 02 00 20 	mvi r2,32
}


// LCD Funciones
void wait_lcd (unsigned int a) {
	while (a == 0x01){ //donep=1; 
 498:	34 03 00 01 	mvi r3,1
		a = lcd0->donepwb;
	}
}
void lcd_inicializa () { //unsigned char  uint8_t 8 Bit 
	volatile unsigned int  a;
	lcd0->cs = 0x20;// sig=0, rsin=0, donec=0; start=1
 49c:	58 22 00 04 	sw (r1+4),r2
	a = lcd0->donepwb;
 4a0:	28 22 00 08 	lw r2,(r1+8)
 4a4:	5b 82 00 04 	sw (sp+4),r2
	lcd0->cs = 0x24; //donec=1;
 4a8:	34 02 00 24 	mvi r2,36
 4ac:	58 22 00 04 	sw (r1+4),r2
	lcd0->data_out = 0x02; //4 bit mode ON, 1 line, 5*8 font
 4b0:	34 02 00 02 	mvi r2,2
 4b4:	58 22 00 00 	sw (r1+0),r2
	wait_lcd(a);
 4b8:	2b 82 00 04 	lw r2,(sp+4)
}


// LCD Funciones
void wait_lcd (unsigned int a) {
	while (a == 0x01){ //donep=1; 
 4bc:	5c 43 00 04 	bne r2,r3,4cc <lcd_inicializa+0x48>
 4c0:	b8 40 18 00 	mv r3,r2
		a = lcd0->donepwb;
 4c4:	28 22 00 08 	lw r2,(r1+8)
}


// LCD Funciones
void wait_lcd (unsigned int a) {
	while (a == 0x01){ //donep=1; 
 4c8:	44 43 ff ff 	be r2,r3,4c4 <lcd_inicializa+0x40>
		a = lcd0->donepwb;
	}
	while (a == 0x00){ //donep=0;
 4cc:	5c 40 00 03 	bne r2,r0,4d8 <lcd_inicializa+0x54>
		a = lcd0->donepwb;
 4d0:	28 22 00 08 	lw r2,(r1+8)
// LCD Funciones
void wait_lcd (unsigned int a) {
	while (a == 0x01){ //donep=1; 
		a = lcd0->donepwb;
	}
	while (a == 0x00){ //donep=0;
 4d4:	44 40 ff ff 	be r2,r0,4d0 <lcd_inicializa+0x4c>
	lcd0->cs = 0x20;// sig=0, rsin=0, donec=0; start=1
	a = lcd0->donepwb;
	lcd0->cs = 0x24; //donec=1;
	lcd0->data_out = 0x02; //4 bit mode ON, 1 line, 5*8 font
	wait_lcd(a);
	lcd0->data_out = 0x0C; //Display ON/OFF control: display ON, cursor OFF, blink OFF
 4d8:	34 02 00 0c 	mvi r2,12
 4dc:	58 22 00 00 	sw (r1+0),r2
	wait_lcd(a);
 4e0:	2b 82 00 04 	lw r2,(sp+4)
}


// LCD Funciones
void wait_lcd (unsigned int a) {
	while (a == 0x01){ //donep=1; 
 4e4:	34 03 00 01 	mvi r3,1
 4e8:	5c 43 00 04 	bne r2,r3,4f8 <lcd_inicializa+0x74>
 4ec:	b8 40 18 00 	mv r3,r2
		a = lcd0->donepwb;
 4f0:	28 22 00 08 	lw r2,(r1+8)
}


// LCD Funciones
void wait_lcd (unsigned int a) {
	while (a == 0x01){ //donep=1; 
 4f4:	44 43 ff ff 	be r2,r3,4f0 <lcd_inicializa+0x6c>
		a = lcd0->donepwb;
	}
	while (a == 0x00){ //donep=0;
 4f8:	5c 40 00 03 	bne r2,r0,504 <lcd_inicializa+0x80>
		a = lcd0->donepwb;
 4fc:	28 22 00 08 	lw r2,(r1+8)
// LCD Funciones
void wait_lcd (unsigned int a) {
	while (a == 0x01){ //donep=1; 
		a = lcd0->donepwb;
	}
	while (a == 0x00){ //donep=0;
 500:	44 40 ff ff 	be r2,r0,4fc <lcd_inicializa+0x78>
	lcd0->cs = 0x24; //donec=1;
	lcd0->data_out = 0x02; //4 bit mode ON, 1 line, 5*8 font
	wait_lcd(a);
	lcd0->data_out = 0x0C; //Display ON/OFF control: display ON, cursor OFF, blink OFF
	wait_lcd(a);
	lcd0->data_out = 0x03; //Cursor home
 504:	34 02 00 03 	mvi r2,3
 508:	58 22 00 00 	sw (r1+0),r2
	wait_lcd(a);
 50c:	2b 82 00 04 	lw r2,(sp+4)
}


// LCD Funciones
void wait_lcd (unsigned int a) {
	while (a == 0x01){ //donep=1; 
 510:	34 03 00 01 	mvi r3,1
 514:	5c 43 00 04 	bne r2,r3,524 <lcd_inicializa+0xa0>
 518:	b8 40 18 00 	mv r3,r2
		a = lcd0->donepwb;
 51c:	28 22 00 08 	lw r2,(r1+8)
}


// LCD Funciones
void wait_lcd (unsigned int a) {
	while (a == 0x01){ //donep=1; 
 520:	44 43 ff ff 	be r2,r3,51c <lcd_inicializa+0x98>
		a = lcd0->donepwb;
	}
	while (a == 0x00){ //donep=0;
 524:	5c 40 00 03 	bne r2,r0,530 <lcd_inicializa+0xac>
		a = lcd0->donepwb;
 528:	28 22 00 08 	lw r2,(r1+8)
// LCD Funciones
void wait_lcd (unsigned int a) {
	while (a == 0x01){ //donep=1; 
		a = lcd0->donepwb;
	}
	while (a == 0x00){ //donep=0;
 52c:	44 40 ff ff 	be r2,r0,528 <lcd_inicializa+0xa4>
	wait_lcd(a);
	lcd0->data_out = 0x0C; //Display ON/OFF control: display ON, cursor OFF, blink OFF
	wait_lcd(a);
	lcd0->data_out = 0x03; //Cursor home
	wait_lcd(a);
	lcd0->data_out = 0x01; //Clear display
 530:	34 03 00 01 	mvi r3,1
 534:	58 23 00 00 	sw (r1+0),r3
	wait_lcd(a);
 538:	2b 82 00 04 	lw r2,(sp+4)
}


// LCD Funciones
void wait_lcd (unsigned int a) {
	while (a == 0x01){ //donep=1; 
 53c:	5c 43 00 04 	bne r2,r3,54c <lcd_inicializa+0xc8>
 540:	b8 40 18 00 	mv r3,r2
		a = lcd0->donepwb;
 544:	28 22 00 08 	lw r2,(r1+8)
}


// LCD Funciones
void wait_lcd (unsigned int a) {
	while (a == 0x01){ //donep=1; 
 548:	44 43 ff ff 	be r2,r3,544 <lcd_inicializa+0xc0>
		a = lcd0->donepwb;
	}
	while (a == 0x00){ //donep=0;
 54c:	5c 40 00 03 	bne r2,r0,558 <lcd_inicializa+0xd4>
		a = lcd0->donepwb;
 550:	28 22 00 08 	lw r2,(r1+8)
// LCD Funciones
void wait_lcd (unsigned int a) {
	while (a == 0x01){ //donep=1; 
		a = lcd0->donepwb;
	}
	while (a == 0x00){ //donep=0;
 554:	44 40 ff ff 	be r2,r0,550 <lcd_inicializa+0xcc>
	wait_lcd(a);
	lcd0->data_out = 0x03; //Cursor home
	wait_lcd(a);
	lcd0->data_out = 0x01; //Clear display
	wait_lcd(a);
	lcd0->data_out = 0x80; //Set DDRAM address to 0
 558:	34 02 00 80 	mvi r2,128
 55c:	58 22 00 00 	sw (r1+0),r2
	wait_lcd(a);
 560:	2b 82 00 04 	lw r2,(sp+4)
}


// LCD Funciones
void wait_lcd (unsigned int a) {
	while (a == 0x01){ //donep=1; 
 564:	34 03 00 01 	mvi r3,1
 568:	5c 43 00 04 	bne r2,r3,578 <lcd_inicializa+0xf4>
 56c:	b8 40 18 00 	mv r3,r2
		a = lcd0->donepwb;
 570:	28 22 00 08 	lw r2,(r1+8)
}


// LCD Funciones
void wait_lcd (unsigned int a) {
	while (a == 0x01){ //donep=1; 
 574:	44 43 ff ff 	be r2,r3,570 <lcd_inicializa+0xec>
		a = lcd0->donepwb;
	}
	while (a == 0x00){ //donep=0;
 578:	5c 40 00 03 	bne r2,r0,584 <lcd_inicializa+0x100>
		a = lcd0->donepwb;
 57c:	28 22 00 08 	lw r2,(r1+8)
// LCD Funciones
void wait_lcd (unsigned int a) {
	while (a == 0x01){ //donep=1; 
		a = lcd0->donepwb;
	}
	while (a == 0x00){ //donep=0;
 580:	44 40 ff ff 	be r2,r0,57c <lcd_inicializa+0xf8>
	wait_lcd(a);
	lcd0->data_out = 0x01; //Clear display
	wait_lcd(a);
	lcd0->data_out = 0x80; //Set DDRAM address to 0
	wait_lcd(a);
	lcd0->cs = 0x21; // sig=1, start=1
 584:	34 02 00 21 	mvi r2,33
 588:	58 22 00 04 	sw (r1+4),r2
}
 58c:	37 9c 00 04 	addi sp,sp,4
 590:	c3 a0 00 00 	ret
